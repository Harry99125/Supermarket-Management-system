BY SUBMITTING THIS FILE TO CARMEN, I CERTIFY THAT I STRICTLY ADHERED TO THE
TENURES OF THE OHIO STATE UNIVERSITY’S ACADEMIC INTEGRITY POLICY.
THIS IS THE README FILE FOR LAB 4. 
Name:Zening Teng
∙ Total amount of time (effort) it took for you to complete the lab
A:40-50 hours
∙ Short description of any concerns, interesting problems or discoveries encountered, or
comments in general about the contents of the lab 
A:linked list is interesting, you start search from the head, keep going down until the place you want. An interesting problem I got is print items in the list. The data were correct but format was incorrect, I used field justification to solve the problem.
∙ Describe, with 4-5 sentences, how you used gdb to find a bug in your program while
debugging it. Or, if you had no bugs in your program, how you used gdb to verify that
your program was working correctly. Include how you set breakpoints, variables you
printed out, what values they had, what you found that enabled you to fix the bug. . If
you didn’t have to use gdb to find any bugs, then use gdb to print out the value of each
address you received from a malloc()/calloc() call, then use a breakpoint for the free()
system call to verify that each addressed is passed to free at the end of the program.
You may use ddd instead of gdb, if you wish. 
A:During this lab, I got many segmentation fault, and gdb can help me target where the bug acutally is.First I break main,keep going down, use disp to get values of variables if necessary, if I find the problem, I'll just break line where the problem is next time I run gdb. Gdb also helps me solve memory leak, by keep returning address, I know why there's a definitely lost memory leak in my program.If I see the address of pointer become null before all malloc are freed, then that means I gonna do something to free these memory.
